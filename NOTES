## Syntax and semantics

Numbers are accepted in both decimal and hex (0x) formats, positive and negative.

String literals are "foo bar"; :foo is also permitted if the string contains no whitespace. String literals evaluate to the address of the allocated string. This memory WILL NOT BE FREED AUTOMATICALLY. Unless passed to a function that frees it or takes ownership of it, it must be freed by the user.

(TODO: functions)

Everything else is a word. Words are executed immediately when read; if prefixed with &, the address of the word is put on the stack instead.

## writing C definitions for nf words

{, in addition to creating the Word, also begins a word_anon_<address> function
Each instruction compiled is then appended
} closes the function
defn can then emit:
  const PROGMEM char word_<mangled>_name = "...";
  #define word_<mangled>_impl word_anon_<address>
and
  { (Word*)1, word_<mangled>_impl, word_<mangled>_name, flags },
into the C.

Problem: how do we handle nested functions?
Assume we have a stack of function definitions.
Then when we finish one, } calls compile_addressof, which in nfbc is:
  OP_PUSHLITERAL,(Cell)word
and in C should be:
  push((Cell)word_anon_<address>);
as long as we call this *after* we've finalized and popped the current function source code,
we should be good.

## new input code

execute.c gets most of stacks.c and possibly some other things besides like execute_wordlist()
compile.c gets the new lexing/parsing code
basic operation is compile(string) which reads input and pushes opcodes onto the stack, then malloc()s room for them and moves them off the stack into the new buffer
we shouldn't need to change the code for { and }, although we can probably factor some bits out into a common function
So :double { 2 * } defn turns into:

PUSHLITERAL "double"
[create new word and add it to the compilation chain]
PUSHLITERAL 2
&*
[pop last three cells, store in word, push word, link word into dict]
&defn

Since { and } are immediate, that leaves the stack as:
PUSHLITERAL "double" <address of anonymous word> &defn
reaching EOF, compile() then pops this into a wordlist -- either malloc'd or a static buffer, although in the latter case we can probably write to the buffer directly rather than using the stack -- and then the caller can execute_wordlist() it and then free it.

When compile() runs out of input, or when it runs out of space to compile to, it returns. This presumably means it needs a way to communicate to the caller how far it got -- or it needs to use a stateful input source.

Say, something like:
WordList compile(char (*next)(void*), void* data)
and it repeatedly calls next(data) to get the next character, with the expectation that it will return EOF on eof
so for file input this is just fgetc and the FILE*
for serial input it's a wrapper around ReadByte that returns EOF on \n
for tty input it's a wrapper around getchar() that behaves similarly

## Compiling C functions

:foo.nf c/file

Opens foo.nf.dict and foo.nf.impl

:foo { "bar();" "baz();" } c/def

Defines foo as an error word and writes the real implementation to foo.nf.impl; recompile notforth to get it

TODO: if the function is already defined, write the implementation but do not register the word in the dictionary.

0 c/file

Closes the .impl and .dict. Run `make` to incorporate the new words.


Compiling notforth to C

As a wordlist it's going to be a bunch of:
- PUSHLITERAL n => push(n)
- CALLWORD word => word_<mangled_name>_impl();
- <function pointer> => word_<mangled_name(fpointer_to_word(fp)->name)_impl();

This works because, if the target word is a wordlist, we nonetheless know that it's available as a C function (because it's part of the bootstrapping process). If it's not a wordlist, we walk the dictionary to figure out which word the function corresponds to and derive the function name from that.

## Calling wordlists in flash

We don't need to worry about this, since even wordlist functions, if compiled on the host, turn into C functions.

## arduino build process:

- anything with a .ino extension gets catted together, then Arduino headers are prepended, arduino preprocessor runs, *then* it gets fed to gcc. So stuff with arduino-specific code should go in .ino files.
- C files are compiled and then linked in to the final program. So stuff with multiplatform code should go in .c files.
- stuff with linux specific code should go in .c files guarded by #ifdef HOST_NOTFORTH

## building using avr-gcc

This seems to get as far as linking and then die because there's no main():
avr-gcc -flto -mmcu=atmega328p -DARDUINO -Wl,--gc-sections -o notforth.hex *.c
Here's some bits from the arduino IDE:

"/share/arduino/hardware/tools/avr/bin/avr-g++" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics  -flto -w -x c++ -E -CC -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/notforth.ino.cpp" -o "/dev/null"

Generating function prototypes...
"/share/arduino/hardware/tools/avr/bin/avr-g++" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics  -flto -w -x c++ -E -CC -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/notforth.ino.cpp" -o "/tmp/arduino_build_873616/preproc/ctags_target_for_gcc_minus_e.cpp"
"/share/arduino/tools-builder/ctags/5.8-arduino10/ctags" -u --language-force=c++ -f - --c++-kinds=svpf --fields=KSTtzns --line-directives "/tmp/arduino_build_873616/preproc/ctags_target_for_gcc_minus_e.cpp"
Compiling sketch...
"/share/arduino/hardware/tools/avr/bin/avr-g++" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/notforth.ino.cpp" -o "/tmp/arduino_build_873616/sketch/notforth.ino.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/compiler.c" -o "/tmp/arduino_build_873616/sketch/compiler.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc" -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto -fno-fat-lto-objects -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/lexer.c" -o "/tmp/arduino_build_873616/sketch/lexer.c.o"
Using previously compiled file: /tmp/arduino_build_873616/sketch/notforth.c.o
Using previously compiled file: /tmp/arduino_build_873616/sketch/repl.c.o
Using previously compiled file: /tmp/arduino_build_873616/sketch/tty.c.o
"/share/arduino/hardware/tools/avr/bin/avr-g++" -c -g -Os -w -std=gnu++11 -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD -flto -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/tmp/arduino_build_873616/sketch/notforth.ino.cpp" -o "/tmp/arduino_build_873616/sketch/notforth.ino.cpp.o"
Compiling libraries...
Compiling core...
"/share/arduino/hardware/tools/avr/bin/avr-gcc" -c -g -x assembler-with-cpp -flto -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/share/arduino/hardware/arduino/avr/cores/arduino/wiring_pulse.S" -o "/tmp/arduino_build_873616/core/wiring_pulse.S.o"

Compiling libraries...
Compiling core...
"/share/arduino/hardware/tools/avr/bin/avr-gcc" -c -g -x assembler-with-cpp -flto -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10612 -DARDUINO_AVR_DUEMILANOVE -DARDUINO_ARCH_AVR   "-I/share/arduino/hardware/arduino/avr/cores/arduino" "-I/share/arduino/hardware/arduino/avr/variants/standard" "/share/arduino/hardware/arduino/avr/cores/arduino/wiring_pulse.S" -o "/tmp/arduino_build_873616/core/wiring_pulse.S.o"
Using previously compiled file: /tmp/arduino_build_873616/core/WInterrupts.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/hooks.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/wiring.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/wiring_analog.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/wiring_digital.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/wiring_pulse.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/wiring_shift.c.o
Using previously compiled file: /tmp/arduino_build_873616/core/CDC.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/HardwareSerial.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/HardwareSerial0.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/HardwareSerial1.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/HardwareSerial2.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/HardwareSerial3.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/IPAddress.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/PluggableUSB.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/Print.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/Stream.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/Tone.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/USBCore.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/WMath.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/WString.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/abi.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/main.cpp.o
Using previously compiled file: /tmp/arduino_build_873616/core/new.cpp.o
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring_pulse.S.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/WInterrupts.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/hooks.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring_analog.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring_digital.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring_pulse.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/wiring_shift.c.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/CDC.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/HardwareSerial.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/HardwareSerial0.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/HardwareSerial1.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/HardwareSerial2.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/HardwareSerial3.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/IPAddress.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/PluggableUSB.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/Print.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/Stream.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/Tone.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/USBCore.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/WMath.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/WString.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/abi.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/main.cpp.o"
"/share/arduino/hardware/tools/avr/bin/avr-gcc-ar" rcs  "/tmp/arduino_build_873616/core/core.a" "/tmp/arduino_build_873616/core/new.cpp.o"
Linking everything together...
"/share/arduino/hardware/tools/avr/bin/avr-gcc" -w -Os -flto -fuse-linker-plugin -Wl,--gc-sections -mmcu=atmega328p  -o "/tmp/arduino_build_873616/notforth.ino.elf" "/tmp/arduino_build_873616/sketch/compiler.c.o" "/tmp/arduino_build_873616/sketch/corewords.c.o" "/tmp/arduino_build_873616/sketch/dictionary.c.o" "/tmp/arduino_build_873616/sketch/execute.c.o" "/tmp/arduino_build_873616/sketch/lexer.c.o" "/tmp/arduino_build_873616/sketch/notforth.c.o" "/tmp/arduino_build_873616/sketch/repl.c.o" "/tmp/arduino_build_873616/sketch/tty.c.o" "/tmp/arduino_build_873616/sketch/notforth.ino.cpp.o" "/tmp/arduino_build_873616/core/core.a" "-L/tmp/arduino_build_873616" -lm
"/share/arduino/hardware/tools/avr/bin/avr-objcopy" -O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0  "/tmp/arduino_build_873616/notforth.ino.elf" "/tmp/arduino_build_873616/notforth.ino.eep"
"/share/arduino/hardware/tools/avr/bin/avr-objcopy" -O ihex -R .eeprom  "/tmp/arduino_build_873616/notforth.ino.elf" "/tmp/arduino_build_873616/notforth.ino.hex"
